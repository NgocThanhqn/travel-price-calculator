import React, { useState, useEffect, useRef } from 'react';
import { apiService } from '../services/api';
import MapSelector from './MapSelector';
import CompactAddressSelector from './CompactAddressSelector';

import googleMapsLoader from '../utils/googleMapsLoader';

const PriceCalculator = () => {
  const [mapsReady, setMapsReady] = useState(false);
  const [mapsLoading, setMapsLoading] = useState(false);
  const [mapsError, setMapsError] = useState('');

  const [fromCoords, setFromCoords] = useState({ lat: '', lng: '' });
  const [toCoords, setToCoords] = useState({ lat: '', lng: '' });
  const [fromAddress, setFromAddress] = useState('');
  const [toAddress, setToAddress] = useState('');
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [showMap, setShowMap] = useState(false);
  const [selectingMode, setSelectingMode] = useState(null); // 'from' or 'to'
  const [selectedLocations, setSelectedLocations] = useState({});

  // Address selector states
  const [showFromAddressSelector, setShowFromAddressSelector] = useState(false);
  const [showToAddressSelector, setShowToAddressSelector] = useState(false);
  const [apiKey, setApiKey] = useState('');

  // Booking form states
  const [vehicleType, setVehicleType] = useState('4_seats');
  const [vehicleTypes, setVehicleTypes] = useState({});
  const [showBookingForm, setShowBookingForm] = useState(false);
  const [bookingData, setBookingData] = useState({
    customer_name: '',
    customer_phone: '',
    customer_email: '',
    travel_date: '',
    travel_time: '08:00',
    passenger_count: 1,
    notes: ''
  });
  const [bookingLoading, setBookingLoading] = useState(false);
  const [bookingSuccess, setBookingSuccess] = useState('');
  // 1. TH√äM STATE M·ªöI ƒë·ªÉ l∆∞u th√¥ng tin v√©:
  const [ticketInfo, setTicketInfo] = useState(null);
  const formRef = useRef(null);

  useEffect(() => {
    loadVehicleTypes();
    loadApiKey();
    // Set default date to tomorrow
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    setBookingData(prev => ({
      ...prev,
      travel_date: tomorrow.toISOString().split('T')[0]
    }));
  }, []);

  // Kh·ªüi t·∫°o Google Maps ngay khi component mount
  useEffect(() => {
    const initializeMaps = async () => {
      try {
        setMapsLoading(true);
        console.log('üó∫Ô∏è Initializing Google Maps for geocoding...');
        
        // S·ª≠ d·ª•ng GoogleMapsLoader c·ªßa b·∫°n
        await googleMapsLoader.load();
        
        setMapsReady(true);
        setMapsError('');
        console.log('‚úÖ Google Maps ready for geocoding in PriceCalculator');
        
      } catch (error) {
        setMapsError(error.message);
        console.error('‚ùå Maps initialization failed:', error);
      } finally {
        setMapsLoading(false);
      }
    };

    initializeMaps();
  }, []);

  // C·∫≠p nh·∫≠t geocoding function ƒë·ªÉ s·ª≠ d·ª•ng GoogleMapsLoader
  const geocodeAddress = async (address) => {
    try {
      if (!mapsReady) {
        throw new Error('Google Maps ch∆∞a s·∫µn s√†ng. Vui l√≤ng ch·ªù...');
      }

      console.log('üîç Geocoding address:', address);
      
      // S·ª≠ d·ª•ng method geocodeAddress t·ª´ GoogleMapsLoader
      const coords = await googleMapsLoader.geocodeAddress(address);
      
      console.log('‚úÖ Geocoding success:', coords);
      return coords;
      
    } catch (error) {
      console.error('‚ùå Geocoding failed:', error);
      throw error;
    }
  };
  // C·∫≠p nh·∫≠t search handler
  const handleSearch = async (e) => {
    e.preventDefault();
    const searchQuery = e.target.search.value.trim();
    
    if (!searchQuery) return;

    if (!mapsReady) {
      setError('Google Maps ƒëang kh·ªüi t·∫°o, vui l√≤ng ch·ªù...');
      return;
    }

    try {
      setLoading(true);
      setError('');
      
      const coords = await geocodeAddress(searchQuery);
      
      if (coords.lat && coords.lng) {
        // Handle location select based on current mode
        if (selectingFromAddress) {
          handleFromAddressSelect(coords);
        } else if (selectingToAddress) {
          handleToAddressSelect(coords);
        }
        
        // Clear search after selection
        e.target.search.value = '';
      }
    } catch (error) {
      setError('L·ªói t√¨m ki·∫øm: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const loadApiKey = async () => {
    try {
      const key = localStorage.getItem('googleMapsApiKey');
      if (key) {
        setApiKey(key);
      }
    } catch (error) {
      console.error('‚ùå L·ªói t·∫£i API key:', error);
    }
  };

  const loadVehicleTypes = async () => {
    try {
      const response = await apiService.getVehicleTypes();
      setVehicleTypes(response.data);
    } catch (err) {
      console.error('Error loading vehicle types:', err);
      // Fallback vehicle types
      setVehicleTypes({
        "4_seats": {
          "name": "Xe 4 ch·ªó",
          "description": "Ph√π h·ª£p cho 1-3 kh√°ch",
          "price_multiplier": 1.0,
          "max_passengers": 4
        },
        "7_seats": {
          "name": "Xe 7 ch·ªó", 
          "description": "Ph√π h·ª£p cho 4-6 kh√°ch",
          "price_multiplier": 1.2,
          "max_passengers": 7
        },
        "16_seats": {
          "name": "Xe 16 ch·ªó",
          "description": "Ph√π h·ª£p cho 7-15 kh√°ch", 
          "price_multiplier": 1.5,
          "max_passengers": 16
        }
      });
    }
  };

  const handleLocationSelect = (location) => {
    if (selectingMode === 'from') {
      setFromCoords({ lat: location.lat.toString(), lng: location.lng.toString() });
      setFromAddress(location.address);
      setSelectedLocations(prev => ({ ...prev, from: location }));
    } else if (selectingMode === 'to') {
      setToCoords({ lat: location.lat.toString(), lng: location.lng.toString() });
      setToAddress(location.address);
      setSelectedLocations(prev => ({ ...prev, to: location }));
    }
  };

  const handleFromAddressSelect = (location) => {
    if (location) {
      setFromCoords({ 
        lat: location.lat ? location.lat.toString() : '', 
        lng: location.lng ? location.lng.toString() : '' 
      });
      setFromAddress(location.address);
      setSelectedLocations(prev => ({ ...prev, from: location }));
    }
    setShowFromAddressSelector(false);
  };

  const handleToAddressSelect = (location) => {
    if (location) {
      setToCoords({ 
        lat: location.lat ? location.lat.toString() : '', 
        lng: location.lng ? location.lng.toString() : '' 
      });
      setToAddress(location.address);
      setSelectedLocations(prev => ({ ...prev, to: location }));
    }
    setShowToAddressSelector(false);
  };

  const openMapSelector = (mode) => {
    setSelectingMode(mode);
    setShowMap(true);
  };

  const handleCalculate = async () => {
    if (!fromCoords.lat || !fromCoords.lng || !toCoords.lat || !toCoords.lng) {
      setError('Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ƒëi·ªÉm ƒëi v√† ƒëi·ªÉm ƒë·∫øn');
      return;
    }

    setLoading(true);
    setError('');
    setShowBookingForm(false);
    setBookingSuccess('');

    try {
      const requestData = {
        from_lat: parseFloat(fromCoords.lat),
        from_lng: parseFloat(fromCoords.lng),
        to_lat: parseFloat(toCoords.lat),
        to_lng: parseFloat(toCoords.lng),
        from_address: fromAddress || null,
        to_address: toAddress || null,
        vehicle_type: vehicleType
      };

      // S·ª≠ d·ª•ng enhanced API ƒë·ªÉ c√≥ kho·∫£ng c√°ch ch√≠nh x√°c t·ª´ Google Maps
      const response = await apiService.calculatePriceEnhanced(requestData);
      setResult(response.data);
      
      // Auto show booking form after successful price calculation
      setTimeout(() => {
        setShowBookingForm(true);
      }, 1000);
      
    } catch (err) {
      setError('C√≥ l·ªói x·∫£y ra khi t√≠nh to√°n: ' + (err.response?.data?.detail || err.message));
    } finally {
      setLoading(false);
    }
  };

  const handleTestCalculation = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await apiService.testDistance();
      if (response.data && response.data.success) {
        // Fake a complete result for test
        const fallbackResult = {
          success: true,
          data: {
            distance_km: 15.2,
            duration_minutes: 25,
            base_price: 50000,
            distance_price: 24000,
            vehicle_multiplier: 1.0,
            final_price: 74000
          }
        };
        setResult(fallbackResult);
        
        setTimeout(() => {
          setShowBookingForm(true);
        }, 1000);
      } else {
        throw new Error('Test failed');
      }
      
    } catch (err) {
      setError('C√≥ l·ªói x·∫£y ra: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const fillSampleData = () => {
    const fromLoc = { lat: 10.762622, lng: 106.660172, address: 'Qu·∫≠n 1, TP.HCM' };
    const toLoc = { lat: 10.732599, lng: 106.719749, address: 'Qu·∫≠n 7, TP.HCM' };
    
    setFromCoords({ lat: '10.762622', lng: '106.660172' });
    setToCoords({ lat: '10.732599', lng: '106.719749' });
    setFromAddress('Qu·∫≠n 1, TP.HCM');
    setToAddress('Qu·∫≠n 7, TP.HCM');
    setSelectedLocations({ from: fromLoc, to: toLoc });
  };

  // const getAdjustedPrice = () => {
  //   if (!result || !vehicleTypes[vehicleType]) return null;
    
  //   // Th·ª≠ nhi·ªÅu c√°ch ƒë·ªÉ l·∫•y gi√° c∆° b·∫£n
  //   const basePrice = result.data?.final_price || 
  //                    result.data?.base_price || 
  //                    result.final_price || 
  //                    result.base_price || 
  //                    result.calculated_price || 
  //                    0;
    
  //   const multiplier = vehicleTypes[vehicleType].price_multiplier || 1;
  //   const adjustedPrice = Math.round(basePrice * multiplier);
    
  //   return {
  //     calculated_price: adjustedPrice,
  //     original_price: basePrice,
  //     vehicle_multiplier: multiplier
  //   };
  // };

  const getAdjustedPrice = () => {
  if (!result || !vehicleTypes[vehicleType]) return null;
  
  // Th·ª≠ nhi·ªÅu c√°ch ƒë·ªÉ l·∫•y gi√° c∆° b·∫£n - TH√äM SUPPORT CHO TIER PRICING
  const basePrice = result.data?.total_price ||       // Tier pricing
                   result.data?.calculated_price ||   // Simple pricing 
                   result.data?.final_price ||        
                   result.total_price ||              // Direct tier response
                   result.calculated_price ||
                   result.final_price || 
                   result.base_price || 
                   0;
  
  const multiplier = vehicleTypes[vehicleType].price_multiplier || 1;
  const adjustedPrice = Math.round(basePrice * multiplier);
  
  return {
    calculated_price: adjustedPrice,
    original_price: basePrice,
    vehicle_multiplier: multiplier
  };
};

const getDisplayPrice = () => {
  // Ki·ªÉm tra n·∫øu l√† tier pricing (c√≥ total_price)
  if (result?.total_price || result?.data?.total_price) {
    const tierPrice = result?.total_price || result?.data?.total_price || 0;
    const multiplier = vehicleTypes[vehicleType]?.price_multiplier || 1.0;
    return Math.round(tierPrice * multiplier);
  }
  
  // Fallback cho simple pricing
  const adjustedResult = getAdjustedPrice();
  return adjustedResult?.calculated_price || 0;
};

  const handleNewBooking = () => {
    // Reset all states
    setBookingSuccess('');
    setTicketInfo(null);
    setShowBookingForm(false);
    setResult(null);
    setError('');
    
    // Clear location data
    setFromCoords({ lat: '', lng: '' });
    setToCoords({ lat: '', lng: '' });
    setFromAddress('');
    setToAddress('');
    setSelectedLocations({});
    
    // Reset vehicle type
    setVehicleType('4_seats');
    
    // Reset booking data
    setBookingData({
      customer_name: '',
      customer_phone: '',
      customer_email: '',
      travel_date: '',
      travel_time: '08:00',
      passenger_count: 1,
      notes: ''
    });

    // Scroll to form ƒë·ªãa ch·ªâ
    setTimeout(() => {
      if (formRef.current) {
        formRef.current.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'start'
        });
      }
    }, 100);
  };

  const handleBookingInputChange = (e) => {
    const { name, value } = e.target;
    setBookingData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleBookingSubmit = async (e) => {
    e.preventDefault();
    setBookingLoading(true);
    setError('');
    setBookingSuccess('');

    try {
      // L·∫•y gi√° ƒë√£ t√≠nh t·ª´ form (ƒë√£ bao g·ªìm vehicle multiplier)
      const finalCalculatedPrice = getDisplayPrice();
      
      // L·∫•y th√¥ng tin distance v√† duration t·ª´ result
      const distanceKm = result.data?.distance_km || result.distance_km || 0;
      const durationMinutes = result.data?.duration_minutes || result.duration_minutes || 0;

      const bookingRequestData = {
        customer_name: bookingData.customer_name,
        customer_phone: bookingData.customer_phone,
        customer_email: bookingData.customer_email,
        from_lat: parseFloat(fromCoords.lat),
        from_lng: parseFloat(fromCoords.lng),
        to_lat: parseFloat(toCoords.lat),
        to_lng: parseFloat(toCoords.lng),
        from_address: fromAddress,
        to_address: toAddress,
        travel_date: bookingData.travel_date,
        travel_time: bookingData.travel_time,
        passenger_count: parseInt(bookingData.passenger_count),
        vehicle_type: vehicleType,
        notes: bookingData.notes,
        // QUAN TR·ªåNG: Truy·ªÅn gi√° ƒë√£ t√≠nh t·ª´ form
        calculated_price: finalCalculatedPrice,
        distance_km: distanceKm,
        duration_minutes: durationMinutes,
      };
      console.log('üöó Booking request with calculated price:', {
        calculated_price: finalCalculatedPrice,
        distance_km: distanceKm,
        vehicle_type: vehicleType,
        vehicle_multiplier: vehicleTypes[vehicleType]?.price_multiplier
      });

      const response = await apiService.createBooking(bookingRequestData);
      
      if (response.data.success) {
        // LUU TH√îNG TIN V√â TR∆Ø·ªöC KHI RESET
        setTicketInfo({
          ...bookingData,  // Th√¥ng tin kh√°ch h√†ng
          from_address: fromAddress,
          to_address: toAddress,
          vehicle_type_name: vehicleTypes[vehicleType]?.name,
          distance_km: result.data?.distance_km || result.distance_km || 0,
          duration_minutes: result.data?.duration_minutes || result.duration_minutes || 0,
          calculated_price: getAdjustedPrice()?.calculated_price || result.data?.final_price || result.final_price || result.calculated_price || 0,
          booking_id: response.data.booking_id
        });

        setBookingSuccess(`üéâ ƒê·∫∑t chuy·∫øn th√†nh c√¥ng! M√£ ƒë·∫∑t chuy·∫øn: #${response.data.booking_id}. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.`);
        
        // Reset form SAU KHI ƒë√£ l∆∞u th√¥ng tin v√©
        setBookingData({
          customer_name: '',
          customer_phone: '',
          customer_email: '',
          travel_date: '',
          travel_time: '08:00',
          passenger_count: 1,
          notes: ''
        });
      } else {
        setError('C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t chuy·∫øn. Vui l√≤ng th·ª≠ l·∫°i.');
      }
      
    } catch (err) {
      setError('C√≥ l·ªói x·∫£y ra: ' + (err.response?.data?.detail || err.message));
    } finally {
      setBookingLoading(false);
    }
  };

  const renderPriceBreakdown = () => {
    // N·∫øu l√† tier pricing response
    if (result?.price_breakdown || result?.data?.price_breakdown) {
      const breakdown = result?.price_breakdown || result?.data?.price_breakdown || [];
      const basePrice = result?.base_price || result?.data?.base_price || 0;
      
      return (
        <div className="border-t border-gray-200 pt-4">
          <h4 classNsame="font-semibold mb-3 text-gray-700">üí° Chi ti·∫øt t√≠nh gi√° theo b·∫≠c:</h4>
          
          {/* Base price */}
          <div className="bg-white p-3 rounded-lg mb-2">
            <div className="flex justify-between">
              <span className="text-gray-600">Gi√° kh·ªüi ƒëi·ªÉm:</span>
              <span className="font-semibold text-blue-600">{basePrice?.toLocaleString('vi-VN')} VNƒê</span>
            </div>
          </div>
          
          {/* Tier breakdown */}
          {breakdown.map((tier, index) => (
            <div key={index} className="bg-white p-3 rounded-lg mb-2">
              <div className="flex justify-between">
                <span className="text-gray-600">{tier.description || tier.tier}:</span>
                <span className="font-semibold text-orange-600">+{tier.tier_price?.toLocaleString('vi-VN')} VNƒê</span>
              </div>
              <div className="text-xs text-gray-500">
                {tier.distance}km √ó {tier.price_per_km?.toLocaleString('vi-VN')} VNƒê/km
              </div>
            </div>
          ))}
          
          {/* Vehicle multiplier */}
          {vehicleTypes[vehicleType]?.price_multiplier !== 1.0 && (
            <div className="bg-purple-50 p-3 rounded-lg">
              <div className="flex justify-between">
                <span className="text-gray-600">H·ªá s·ªë xe {vehicleTypes[vehicleType]?.name}:</span>
                <span className="font-semibold text-purple-600">√ó{vehicleTypes[vehicleType]?.price_multiplier}</span>
              </div>
            </div>
          )}
        </div>
      );
    }
    
    // Fallback cho simple pricing
    if (result.data?.breakdown || result.breakdown) {
      const breakdown = result.data?.breakdown || result.breakdown;
      return (
        <div className="border-t border-gray-200 pt-4">
          <h4 className="font-semibold mb-3 text-gray-700">üí° Chi ti·∫øt t√≠nh gi√°:</h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="bg-white p-3 rounded-lg">
              <p className="text-gray-600">Gi√° c∆° b·∫£n</p>
              <p className="font-semibold text-blue-600">
                {(breakdown?.base_price || 0).toLocaleString('vi-VN')} VNƒê
              </p>
            </div>
            <div className="bg-white p-3 rounded-lg">
              <p className="text-gray-600">Gi√° theo km</p>
              <p className="font-semibold text-orange-600">
                {(breakdown?.price_per_km || 0).toLocaleString('vi-VN')} VNƒê
              </p>
            </div>
            <div className="bg-white p-3 rounded-lg">
              <p className="text-gray-600">Lo·∫°i xe</p>
              <p className="font-semibold text-purple-600">
                {vehicleTypes[vehicleType]?.name} (√ó{vehicleTypes[vehicleType]?.price_multiplier})
              </p>
            </div>
          </div>
        </div>
      );
    }
    
    return null;
  };

  // N·∫øu ƒëang hi·ªÉn th·ªã map selector
  if (showMap) {
    return (
      <div className="max-w-6xl mx-auto p-6 bg-white shadow-lg rounded-lg">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold text-gray-800">
            üó∫Ô∏è Ch·ªçn {selectingMode === 'from' ? 'ƒëi·ªÉm ƒëi' : 'ƒëi·ªÉm ƒë·∫øn'} tr√™n b·∫£n ƒë·ªì
          </h2>
          <button
            onClick={() => setShowMap(false)}
            className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
          >
            ‚Üê Quay l·∫°i
          </button>
        </div>
        
        <MapSelector 
          onLocationSelect={handleLocationSelect}
          selectedLocations={selectedLocations}
        />
        
        <div className="mt-4 text-center">
          <button
            onClick={() => setShowMap(false)}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold"
          >
            Xong - Quay l·∫°i t√≠nh gi√°
          </button>
        </div>
      </div>
    );
  }

  const adjustedResult = getAdjustedPrice();

  return (
    <div ref={formRef} className="max-w-6xl mx-auto p-6 bg-white shadow-lg rounded-lg">
      <h1 className="text-3xl font-bold text-center mb-8 text-gray-800">
        T√≠nh Gi√° Chuy·∫øn ƒêi
      </h1>
      
      {/* Maps Status Indicator */}
        {mapsLoading && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mt-4">
            <div className="flex items-center justify-center space-x-2">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
              <p className="text-blue-700 text-sm">
                üó∫Ô∏è ƒêang kh·ªüi t·∫°o Google Maps... T√≠nh nƒÉng t√¨m ki·∫øm s·∫Ω ho·∫°t ƒë·ªông sau √≠t gi√¢y.
              </p>
            </div>
          </div>
        )}
        
        {mapsReady && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-3 mt-4">
            <p className="text-green-700 text-sm">
              ‚úÖ Google Maps ƒë√£ s·∫µn s√†ng! B·∫°n c√≥ th·ªÉ t√¨m ki·∫øm ƒë·ªãa ch·ªâ v√† ch·ªçn tr√™n b·∫£n ƒë·ªì.
            </p>
          </div>
        )}
        
        {mapsError && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-3 mt-4">
            <p className="text-red-700 text-sm">
              ‚ùå L·ªói kh·ªüi t·∫°o Maps: {mapsError}. 
              <a href="/admin" className="underline ml-1">Ki·ªÉm tra c·∫•u h√¨nh API Key</a>
            </p>
          </div>
        )}
      
      {/* Input Form */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        {/* ƒêi·ªÉm ƒëi */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-700">üìç Ch·ªçn ƒëi·ªÉm ƒëi</h3>
            <button
              onClick={() => openMapSelector('from')}
              className="px-3 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600 font-medium"
              title="Ch·ªçn tr√™n b·∫£n ƒë·ªì"
            >
              üó∫Ô∏è Ch·ªçn tr√™n b·∫£n ƒë·ªì
            </button>
          </div>

          {/* Default: Address Selector Form */}
          <CompactAddressSelector
            onAddressSelect={handleFromAddressSelect}
            apiKey={apiKey}
          />

          {/* Display selected address if any */}
          {fromAddress && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-3">
              <label className="block text-sm font-medium text-green-800 mb-1">
                ƒê·ªãa ch·ªâ ƒë√£ ch·ªçn:
              </label>
              <input
                type="text"
                value={fromAddress}
                onChange={(e) => setFromAddress(e.target.value)}
                className="w-full p-2 border border-green-300 rounded bg-white focus:ring-2 focus:ring-green-500 focus:border-transparent"
                placeholder="ƒê·ªãa ch·ªâ ƒëi·ªÉm ƒëi"
              />
              <div className="flex justify-between items-center mt-2">
                <span className="text-xs text-green-600">
                  {fromCoords.lat && fromCoords.lng ? 
                    `üìç T·ªça ƒë·ªô: ${parseFloat(fromCoords.lat).toFixed(4)}, ${parseFloat(fromCoords.lng).toFixed(4)}` : 
                    '‚ö†Ô∏è Ch∆∞a c√≥ t·ªça ƒë·ªô ch√≠nh x√°c'
                  }
                </span>
                <button
                  onClick={() => {
                    setFromAddress('');
                    setFromCoords({ lat: '', lng: '' });
                    setSelectedLocations(prev => ({ ...prev, from: null }));
                  }}
                  className="text-xs text-red-600 hover:text-red-800"
                >
                  X√≥a
                </button>
              </div>
            </div>
          )}
        </div>

        {/* ƒêi·ªÉm ƒë·∫øn */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-700">üéØ Ch·ªçn ƒëi·ªÉm ƒë·∫øn</h3>
            <button
              onClick={() => openMapSelector('to')}
              className="px-3 py-1 bg-red-500 text-white text-xs rounded hover:bg-red-600 font-medium"
              title="Ch·ªçn tr√™n b·∫£n ƒë·ªì"
            >
              üó∫Ô∏è Ch·ªçn tr√™n b·∫£n ƒë·ªì
            </button>
          </div>

          {/* Default: Address Selector Form */}
          <CompactAddressSelector
            onAddressSelect={handleToAddressSelect}
            apiKey={apiKey}
          />

          {/* Display selected address if any */}
          {toAddress && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3">
              <label className="block text-sm font-medium text-red-800 mb-1">
                ƒê·ªãa ch·ªâ ƒë√£ ch·ªçn:
              </label>
              <input
                type="text"
                value={toAddress}
                onChange={(e) => setToAddress(e.target.value)}
                className="w-full p-2 border border-red-300 rounded bg-white focus:ring-2 focus:ring-red-500 focus:border-transparent"
                placeholder="ƒê·ªãa ch·ªâ ƒëi·ªÉm ƒë·∫øn"
              />
              <div className="flex justify-between items-center mt-2">
                <span className="text-xs text-red-600">
                  {toCoords.lat && toCoords.lng ? 
                    `üìç T·ªça ƒë·ªô: ${parseFloat(toCoords.lat).toFixed(4)}, ${parseFloat(toCoords.lng).toFixed(4)}` : 
                    '‚ö†Ô∏è Ch∆∞a c√≥ t·ªça ƒë·ªô ch√≠nh x√°c'
                  }
                </span>
                <button
                  onClick={() => {
                    setToAddress('');
                    setToCoords({ lat: '', lng: '' });
                    setSelectedLocations(prev => ({ ...prev, to: null }));
                  }}
                  className="text-xs text-red-600 hover:text-red-800"
                >
                  X√≥a
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Vehicle Type Selection */}
      <div className="mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          üöô Lo·∫°i xe
        </label>
        <select
          value={vehicleType}
          onChange={(e) => setVehicleType(e.target.value)}
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        >
          {Object.entries(vehicleTypes).map(([key, vehicle]) => (
            <option key={key} value={key}>
              {vehicle.name} - {vehicle.description} (√ó{vehicle.price_multiplier})
            </option>
          ))}
        </select>
      </div>

      {/* Buttons */}
      <div className="flex justify-center space-x-4 mb-8">
        <button
          onClick={fillSampleData}
          className="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 font-semibold"
        >
          ƒêi·ªÅn d·ªØ li·ªáu m·∫´u
        </button>
        
        <button
          onClick={handleCalculate}
          disabled={loading}
          className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed font-semibold"
        >
          {loading ? 'ƒêang t√≠nh to√°n...' : 'T√≠nh gi√°'}
        </button>

        {/* <button
          onClick={handleTestCalculation}
          className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 font-semibold"
        >
          Test m·∫´u
        </button> */}
      </div>

      {/* Error Display */}
      {error && (
        <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
          <p className="text-red-700">‚ùå {error}</p>
        </div>
      )}

      {/* Results Display */}
      {result && (
        <div className="mb-8 p-6 bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg shadow-md">
          <h2 className="text-xl font-bold text-green-800 mb-4">üí∞ K·∫øt qu·∫£ t√≠nh gi√°</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-4">
            <div className="text-center">
              <p className="text-sm text-gray-600 mb-1">Kho·∫£ng c√°ch</p>
              <p className="text-2xl font-bold text-blue-600">
                {(result.data?.distance_km || result.distance_km || 0)} km
              </p>
              <p className="text-xs text-gray-500 mt-1">
                <span className={`inline-block w-2 h-2 rounded-full mr-1 ${
                  (result.data?.calculation_method || result.calculation_method) === 'google_maps' ? 'bg-green-500' : 
                  (result.data?.calculation_method || result.calculation_method) === 'enhanced_haversine' ? 'bg-orange-500' :
                  (result.data?.calculation_method || result.calculation_method) === 'haversine_adjusted' ? 'bg-blue-500' : 
                  'bg-gray-500'
                }`}>
                </span>
                {(result.data?.calculation_method || result.calculation_method) === 'google_maps' ? 'üó∫Ô∏è Google Maps' : 
                (result.data?.calculation_method || result.calculation_method) === 'enhanced_haversine' ? 'üßÆ ∆Ø·ªõc t√≠nh n√¢ng cao' :
                (result.data?.calculation_method || result.calculation_method) === 'haversine_adjusted' ? 'üìê ∆Ø·ªõc t√≠nh ƒëi·ªÅu ch·ªânh' : 
                'üîç ƒêang t√≠nh to√°n'}
              </p>
            </div>
            
            <div className="text-center">
              <p className="text-sm text-gray-600 mb-1">Th·ªùi gian ∆∞·ªõc t√≠nh</p>
              <p className="text-2xl font-bold text-orange-600">
                {(result.data?.duration_minutes || result.duration_minutes || 0)} ph√∫t
              </p>
            </div>
            
            <div className="text-center">
              <p className="text-sm text-gray-600 mb-1">T·ªïng chi ph√≠</p>
              <p className="text-3xl font-bold text-green-600">
                {getDisplayPrice().toLocaleString('vi-VN')} 
                <span className="text-lg ml-1">VNƒê</span>
              </p>
              {vehicleTypes[vehicleType]?.price_multiplier !== 1.0 && (
                <p className="text-sm text-gray-500 mt-1">
                  (Gi√° g·ªëc: {(result.total_price || result.data?.total_price || result.calculated_price || result.data?.calculated_price || 0).toLocaleString('vi-VN')} VNƒê √ó {vehicleTypes[vehicleType]?.price_multiplier})
                </p>
              )}
              
              {/* Hi·ªÉn th·ªã lo·∫°i pricing */}
              <p className="text-xs text-gray-500 mt-2">
                {(result.config_type || result.data?.config_type) === 'tier' ? 
                  `üìä T√≠nh gi√° theo b·∫≠c (${result.config_name || result.data?.config_name})` : 
                  `üìà T√≠nh gi√° ƒë∆°n gi·∫£n (${result.config_name || result.data?.config_name})`
                }
              </p>
            </div>
          </div>

          {/* Price breakdown - n·∫øu mu·ªë show chi ti·∫øt gi√° th√¨ b·∫≠t n√≥ l√™n */}
          {/* {renderPriceBreakdown()} */}

          {/* Book Now Button */}
          {!showBookingForm && (
            <div className="text-center mt-6 pt-4 border-t border-gray-200">
              <button
                onClick={() => setShowBookingForm(true)}
                className="px-8 py-4 bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-lg hover:from-green-600 hover:to-blue-600 font-bold text-lg shadow-lg transform hover:scale-105 transition-all duration-200"
              >
                üöó ƒê·∫∑t chuy·∫øn ngay
              </button>
              <p className="text-sm text-gray-500 mt-2">
                * Gi√° tr√™n l√† ∆∞·ªõc t√≠nh. Gi√° cu·ªëi c√πng s·∫Ω ƒë∆∞·ª£c x√°c nh·∫≠n qua ƒëi·ªán tho·∫°i.
              </p>
            </div>
          )}
        </div>
      )}

      {bookingSuccess && ticketInfo && (
        <div className="mb-6 mx-4 bg-gradient-to-br from-green-50 to-emerald-50 border border-green-200 rounded-xl shadow-lg overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-green-500 to-emerald-600 text-white p-4 text-center">
            <div className="text-3xl mb-2">‚úÖ</div>
            <h2 className="text-xl font-bold">ƒê·∫∑t chuy·∫øn th√†nh c√¥ng!</h2>
            <div className="bg-white bg-opacity-20 rounded-lg px-3 py-1 mt-2 inline-block">
              <span className="text-sm font-medium">M√£ ƒë·∫∑t chuy·∫øn: #{ticketInfo.booking_id}</span>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 space-y-4">
            {/* Customer Info */}
            <div className="bg-white rounded-lg p-4 border border-green-100">
              <h3 className="flex items-center font-semibold text-gray-800 mb-3">
                <span className="text-lg mr-2">üë§</span>
                Th√¥ng tin kh√°ch h√†ng
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">H·ªç t√™n:</span>
                  <span className="font-medium text-gray-800">{ticketInfo.customer_name}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">ƒêi·ªán tho·∫°i:</span>
                  <span className="font-medium text-blue-600">{ticketInfo.customer_phone}</span>
                </div>
                {ticketInfo.customer_email && (
                  <div className="flex justify-between md:col-span-2">
                    <span className="text-gray-600">Email:</span>
                    <span className="font-medium text-gray-800">{ticketInfo.customer_email}</span>
                  </div>
                )}
              </div>
            </div>

            {/* Trip Info */}
            <div className="bg-white rounded-lg p-4 border border-green-100">
              <h3 className="flex items-center font-semibold text-gray-800 mb-3">
                <span className="text-lg mr-2">üöó</span>
                Chi ti·∫øt chuy·∫øn ƒëi
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Ng√†y ƒëi:</span>
                  <span className="font-medium text-gray-800">{ticketInfo.travel_date}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Gi·ªù ƒëi:</span>
                  <span className="font-medium text-gray-800">{ticketInfo.travel_time}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">S·ªë kh√°ch:</span>
                  <span className="font-medium text-gray-800">{ticketInfo.passenger_count} ng∆∞·ªùi</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Lo·∫°i xe:</span>
                  <span className="font-medium text-gray-800">{ticketInfo.vehicle_type_name}</span>
                </div>
              </div>
            </div>

            {/* Route Info */}
            <div className="bg-white rounded-lg p-4 border border-green-100">
              <h3 className="flex items-center font-semibold text-gray-800 mb-3">
                <span className="text-lg mr-2">üó∫Ô∏è</span>
                Tuy·∫øn ƒë∆∞·ªùng
              </h3>
              <div className="space-y-3">
                <div className="flex items-start">
                  <div className="w-3 h-3 bg-green-500 rounded-full mt-1.5 mr-3 flex-shrink-0"></div>
                  <div className="flex-1">
                    <div className="text-xs text-gray-500 mb-1">ƒêi·ªÉm ƒëi</div>
                    <div className="text-sm text-gray-800 font-medium">{ticketInfo.from_address}</div>
                  </div>
                </div>
                
                <div className="ml-6 border-l-2 border-dashed border-gray-300 h-4"></div>
                
                <div className="flex items-start">
                  <div className="w-3 h-3 bg-red-500 rounded-full mt-1.5 mr-3 flex-shrink-0"></div>
                  <div className="flex-1">
                    <div className="text-xs text-gray-500 mb-1">ƒêi·ªÉm ƒë·∫øn</div>
                    <div className="text-sm text-gray-800 font-medium">{ticketInfo.to_address}</div>
                  </div>
                </div>
                
                <div className="mt-4 pt-3 border-t border-gray-100">
                  <div className="grid grid-cols-2 gap-4 text-center">
                    <div className="bg-blue-50 rounded-lg p-2">
                      <div className="text-xs text-blue-600 mb-1">Kho·∫£ng c√°ch</div>
                      <div className="text-sm font-semibold text-blue-800">{ticketInfo.distance_km} km</div>
                    </div>
                    <div className="bg-purple-50 rounded-lg p-2">
                      <div className="text-xs text-purple-600 mb-1">Th·ªùi gian d·ª± ki·∫øn</div>
                      <div className="text-sm font-semibold text-purple-800">{ticketInfo.duration_minutes} ph√∫t</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Price Info */}
            <div className="bg-gradient-to-r from-orange-50 to-red-50 rounded-lg p-4 border border-orange-200">
              <div className="text-center">
                <div className="text-sm text-gray-600 mb-2">T·ªïng chi ph√≠</div>
                <div className="text-3xl font-bold text-red-600 mb-2">
                  {ticketInfo.calculated_price?.toLocaleString('vi-VN')} VNƒê
                </div>
                <div className="text-xs text-gray-500">
                  * Gi√° ƒë√£ bao g·ªìm thu·∫ø v√† ph√≠ d·ªãch v·ª•
                </div>
              </div>
            </div>

            {/* Notes */}
            {ticketInfo.notes && (
              <div className="bg-yellow-50 rounded-lg p-4 border border-yellow-200">
                <h4 className="flex items-center font-medium text-gray-800 mb-2">
                  <span className="text-lg mr-2">üìù</span>
                  Ghi ch√∫ ƒë·∫∑c bi·ªát
                </h4>
                <p className="text-sm text-gray-700 italic">{ticketInfo.notes}</p>
              </div>
            )}

            {/* Status & Contact */}
            <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
              <div className="flex items-center justify-center mb-3">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse mr-2"></div>
                <span className="text-sm font-medium text-blue-800">Tr·∫°ng th√°i: ƒêang x·ª≠ l√Ω</span>
              </div>
              <div className="text-center text-sm text-blue-700">
                <p className="mb-2">üìû Ch√∫ng t√¥i s·∫Ω li√™n h·ªá x√°c nh·∫≠n trong <strong>15 ph√∫t</strong></p>
                <p className="text-xs text-blue-600">
                  N·∫øu c√≥ thay ƒë·ªïi, vui l√≤ng g·ªçi: <strong>1900 xxxx</strong>
                </p>
              </div>
            </div>

            {/* Action Button */}
            <div className="text-center pt-4">
              <button
                onClick={() => {
                  setBookingSuccess('');
                  setTicketInfo(null);  // Reset ticket info
                  setShowBookingForm(false);
                  setBookingData();
                  handleNewBooking();
                }}
                className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 font-medium shadow-lg transform hover:scale-105 transition-all duration-200"
              >
                <span className="mr-2">üöó</span>
                ƒê·∫∑t chuy·∫øn kh√°c
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Booking Form */}
      {showBookingForm && result && !bookingSuccess && (
        <div className="bg-gradient-to-br from-blue-50 to-indigo-100 border border-blue-200 rounded-lg p-6 shadow-lg">
          <h2 className="text-xl font-bold text-blue-800 mb-4">üìû ƒê·∫∑t chuy·∫øn ngay</h2>
          {/*{bookingSuccess && (
            <div className="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
              <p className="text-green-700">{bookingSuccess}</p>
            </div>
          )}
          */}

          <form onSubmit={handleBookingSubmit} className="space-y-6">
            {/* Summary */}
            <div className="bg-white p-4 rounded-lg border border-blue-200">
              <h3 className="font-semibold text-blue-800 mb-3">üìã Th√¥ng tin chuy·∫øn ƒëi</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div className="space-y-2">
                  <p><span className="font-medium text-gray-700">T·ª´:</span> <span className="text-blue-600">{fromAddress}</span></p>
                  <p><span className="font-medium text-gray-700">ƒê·∫øn:</span> <span className="text-blue-600">{toAddress}</span></p>
                  <p><span className="font-medium text-gray-700">Kho·∫£ng c√°ch:</span> <span className="text-orange-600">{(result.data?.distance_km || result.distance_km || 0)} km</span></p>
                  <p><span className="font-medium text-gray-700">Th·ªùi gian:</span> <span className="text-purple-600">{(result.data?.duration_minutes || result.duration_minutes || 0)} ph√∫t</span></p>
                </div>
                <div className="space-y-2">
                  <p><span className="font-medium text-gray-700">Lo·∫°i xe:</span> <span className="text-indigo-600">{vehicleTypes[vehicleType]?.name}</span></p>
                  <p><span className="font-medium text-gray-700">S·ªë kh√°ch:</span> <span className="text-green-600">{bookingData.passenger_count} ng∆∞·ªùi</span></p>
                  <div className="bg-gradient-to-r from-green-100 to-blue-100 p-3 rounded-lg mt-3">
                    <p className="text-center">
                      <span className="text-lg font-medium text-gray-700">T·ªïng chi ph√≠:</span>
                    </p>
                    <p className="text-center text-2xl font-bold text-green-600">
                      {(adjustedResult?.calculated_price || result.data?.final_price || result.final_price || result.calculated_price || 0)?.toLocaleString('vi-VN')} VNƒê
                    </p>
                    <p className="text-center text-xs text-gray-500 mt-1">
                      * Gi√° ∆∞·ªõc t√≠nh, s·∫Ω ƒë∆∞·ª£c x√°c nh·∫≠n l·∫°i
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Customer Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  H·ªç v√† t√™n *
                </label>
                <input
                  type="text"
                  name="customer_name"
                  value={bookingData.customer_name}
                  onChange={handleBookingInputChange}
                  required
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="Nguy·ªÖn VƒÉn A"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  S·ªë ƒëi·ªán tho·∫°i *
                </label>
                <input
                  type="tel"
                  name="customer_phone"
                  value={bookingData.customer_phone}
                  onChange={handleBookingInputChange}
                  required
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="0901234567"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email (t√πy ch·ªçn)
                </label>
                <input
                  type="email"
                  name="customer_email"
                  value={bookingData.customer_email}
                  onChange={handleBookingInputChange}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="example@email.com"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Ng√†y ƒëi *
                </label>
                <input
                  type="date"
                  name="travel_date"
                  value={bookingData.travel_date}
                  onChange={handleBookingInputChange}
                  required
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Gi·ªù ƒëi *
                </label>
                <input
                  type="time"
                  name="travel_time"
                  value={bookingData.travel_time}
                  onChange={handleBookingInputChange}
                  required
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  S·ªë h√†nh kh√°ch
                </label>
                <select
                  name="passenger_count"
                  value={bookingData.passenger_count}
                  onChange={handleBookingInputChange}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  {[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16].map(num => (
                    <option key={num} value={num}>{num} kh√°ch</option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Ghi ch√∫ ƒë·∫∑c bi·ªát
              </label>
              <textarea
                name="notes"
                value={bookingData.notes}
                onChange={handleBookingInputChange}
                rows="3"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                placeholder="V√≠ d·ª•: C·∫ßn xe c√≥ WiFi, gh·∫ø tr·∫ª em, ƒëi·ªÉm ƒë√≥n ƒë·∫∑c bi·ªát..."
              />
            </div>

            {/* Action Buttons */}
            <div className="flex gap-4">
              <button
                type="button"
                onClick={() => setShowBookingForm(false)}
                className="flex-1 px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 font-semibold transition-colors"
              >
                ‚Üê Quay l·∫°i
              </button>
              <button
                type="submit"
                disabled={bookingLoading}
                className="flex-2 px-8 py-3 bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-lg hover:from-orange-600 hover:to-red-600 disabled:opacity-50 disabled:cursor-not-allowed font-bold text-lg shadow-lg transform hover:scale-105 transition-all duration-200"
              >
                {bookingLoading ? (
                  <>
                    <span className="inline-block animate-spin mr-2">‚è≥</span>
                    ƒêang x·ª≠ l√Ω...
                  </>
                ) : (
                  <>
                    üìû ƒê·∫∑t chuy·∫øn ngay
                  </>
                )}
              </button>
            </div>

            {/* Terms Notice */}
            <div className="text-center text-xs text-gray-500 mt-4 p-3 bg-gray-50 rounded-lg">
              <p>
                ‚úì B·∫±ng vi·ªác ƒë·∫∑t chuy·∫øn, b·∫°n ƒë·ªìng √Ω v·ªõi <span className="text-blue-600 underline cursor-pointer">ƒëi·ªÅu kho·∫£n d·ªãch v·ª•</span> c·ªßa ch√∫ng t√¥i
              </p>
              <p className="mt-1">
                üìû Ch√∫ng t√¥i s·∫Ω li√™n h·ªá x√°c nh·∫≠n trong v√≤ng 5-10 ph√∫t
              </p>
            </div>
          </form>
        </div>
      )}

      {/* H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng */}
      <div className="mt-8 p-4 bg-gray-50 rounded-lg">
        <h3 className="font-semibold text-gray-800 mb-2">üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</h3>
        <ul className="text-sm text-gray-600 space-y-1 list-disc list-inside">
          <li><strong>üè† Ch·ªçn ƒë·ªãa ch·ªâ:</strong> Ch·ªçn theo t·ªânh/huy·ªán/x√£ sau ƒë√≥ nh·∫≠p ƒë·ªãa ch·ªâ c·ª• th·ªÉ (khuy·∫øn ngh·ªã)</li>
          <li><strong>üó∫Ô∏è Ch·ªçn tr√™n b·∫£n ƒë·ªì:</strong> Click ƒë·ªÉ ch·ªçn ƒëi·ªÉm ch√≠nh x√°c tr√™n Google Maps</li>
          <li><strong>üöô Ch·ªçn lo·∫°i xe:</strong> Xe 4 ch·ªó, 7 ch·ªó, ho·∫∑c 16 ch·ªó v·ªõi gi√° kh√°c nhau</li>
          <li><strong>üìû ƒê·∫∑t chuy·∫øn:</strong> Sau khi t√≠nh gi√°, ƒëi·ªÅn th√¥ng tin ƒë·ªÉ ƒë·∫∑t chuy·∫øn ngay</li>
          <li><strong>üéØ D·ªØ li·ªáu m·∫´u:</strong> Click "ƒêi·ªÅn d·ªØ li·ªáu m·∫´u" ƒë·ªÉ test nhanh t√≠nh nƒÉng</li>
        </ul>
      </div>
    </div>
  );
};

export default PriceCalculator;