import React, { useState, useEffect } from 'react';
import { apiService } from '../services/api';

const AdminPage = () => {
  const [adminAuth, setAdminAuth] = useState(false);
  const [authChecked, setAuthChecked] = useState(false);

  const [config, setConfig] = useState({
    base_price: 10000,
    price_per_km: 5000,
    min_price: 20000,
    max_price: 500000
  });

  const [apiKey, setApiKey] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // X√°c th·ª±c admin
  useEffect(() => {
    const checkAuth = () => {
      try {
        // Ki·ªÉm tra n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p tr∆∞·ªõc ƒë√≥
        const isLoggedIn = localStorage.getItem('adminLoggedIn');
        if (isLoggedIn === 'true') {
          setAdminAuth(true);
          setAuthChecked(true);
          return;
        }

        // Y√™u c·∫ßu nh·∫≠p m·∫≠t kh·∫©u
        const password = prompt('üîê Nh·∫≠p m·∫≠t kh·∫©u admin:');
        if (password === 'tanu2025') {
          setAdminAuth(true);
          localStorage.setItem('adminLoggedIn', 'true');
        } else if (password !== null) { // null = user clicked Cancel
          alert('‚ùå Sai m·∫≠t kh·∫©u!');
          window.location.href = '/';
          return;
        } else {
          // User clicked Cancel
          window.location.href = '/';
          return;
        }
      } catch (error) {
        console.error('Auth error:', error);
        window.location.href = '/';
      } finally {
        setAuthChecked(true);
      }
    };

    checkAuth();
  }, []);

  // Load config sau khi ƒë√£ x√°c th·ª±c
  useEffect(() => {
    if (adminAuth && authChecked) {
      loadConfig();
      loadApiKey();
    }
  }, [adminAuth, authChecked]);

  // Logout function
  const handleLogout = () => {
    localStorage.removeItem('adminLoggedIn');
    setAdminAuth(false);
    window.location.href = '/';
  };

  useEffect(() => {
    loadConfig();
    loadApiKey();
  }, []);

  const loadConfig = async () => {
    try {
      const response = await apiService.getPriceConfig('default');
      setConfig({
        base_price: response.data.base_price,
        price_per_km: response.data.price_per_km,
        min_price: response.data.min_price,
        max_price: response.data.max_price
      });
    } catch (err) {
      setError('Kh√¥ng th·ªÉ t·∫£i c·∫•u h√¨nh: ' + (err.response?.data?.detail || err.message));
    }
  };

  const loadApiKey = async () => {
    try {
      const response = await apiService.getSetting('google_maps_api_key');
      setApiKey(response.data.value || '');
    } catch (err) {
      // API key ch∆∞a ƒë∆∞·ª£c set, kh√¥ng c·∫ßn b√°o l·ªói
      console.log('API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
    }
  };

  const handleConfigSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      await apiService.updatePriceConfig('default', config);
      setSuccess('‚úÖ C·∫≠p nh·∫≠t c·∫•u h√¨nh gi√° th√†nh c√¥ng!');
    } catch (err) {
      setError('L·ªói c·∫≠p nh·∫≠t: ' + (err.response?.data?.detail || err.message));
    } finally {
      setLoading(false);
    }
  };

  const handleApiKeySubmit = async (e) => {
    e.preventDefault();
    if (!apiKey.trim()) {
      setError('Vui l√≤ng nh·∫≠p API Key');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      await apiService.updateSetting(
        'google_maps_api_key', 
        apiKey.trim(), 
        'Google Maps API Key cho t√≠ch h·ª£p b·∫£n ƒë·ªì'
      );
      
      // C≈©ng l∆∞u v√†o localStorage ƒë·ªÉ s·ª≠ d·ª•ng ngay l·∫≠p t·ª©c
      localStorage.setItem('googleMapsApiKey', apiKey.trim());
      
      setSuccess('‚úÖ L∆∞u Google Maps API Key th√†nh c√¥ng!');
    } catch (err) {
      setError('L·ªói l∆∞u API Key: ' + (err.response?.data?.detail || err.message));
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field, value) => {
    setConfig(prev => ({
      ...prev,
      [field]: parseFloat(value) || 0
    }));
  };

  const testConnection = async () => {
    setError('');
    setSuccess('');
    try {
      const response = await apiService.healthCheck();
      setSuccess('‚úÖ K·∫øt n·ªëi API th√†nh c√¥ng! ' + response.data.message);
    } catch (err) {
      setError('‚ùå L·ªói k·∫øt n·ªëi API: ' + err.message);
    }
  };

  const testMapConnection = () => {
    if (!apiKey.trim()) {
      setError('Vui l√≤ng nh·∫≠p v√† l∆∞u API Key tr∆∞·ªõc');
      return;
    }
    
    // Test ƒë∆°n gi·∫£n b·∫±ng c√°ch t·∫°o URL Google Maps
    const testUrl = `https://maps.googleapis.com/maps/api/js?key=${apiKey.trim()}&libraries=places`;
    
    setSuccess('‚úÖ API Key c√≥ format h·ª£p l·ªá. H√£y test tr√™n trang ch√≠nh ƒë·ªÉ ki·ªÉm tra quy·ªÅn truy c·∫≠p.');
  };

  // Hi·ªÉn th·ªã loading khi ƒëang check auth
  if (!authChecked) {
    return (
      <div className="max-w-4xl mx-auto">
        <div className="bg-white shadow-xl rounded-2xl p-8 text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">üîê ƒêang x√°c th·ª±c quy·ªÅn truy c·∫≠p...</p>
        </div>
      </div>
    );
  }

  // Hi·ªÉn th·ªã khi ch∆∞a x√°c th·ª±c
  if (!adminAuth) {
    return (
      <div className="max-w-4xl mx-auto">
        <div className="bg-white shadow-xl rounded-2xl p-8 text-center">
          <h1 className="text-2xl font-bold text-red-600 mb-4">üö´ Truy c·∫≠p b·ªã t·ª´ ch·ªëi</h1>
          <p className="text-gray-600 mb-6">B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.</p>
          <a href="/" className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">
            üè† V·ªÅ trang ch·ªß
          </a>
        </div>
      </div>
    );
  }
  
  return (
    <div className="max-w-4xl mx-auto p-6 space-y-8">
      <div className="bg-white shadow-lg rounded-lg p-6">
        <h1 className="text-3xl font-bold text-center mb-8 text-gray-800">
          üõ†Ô∏è Trang Qu·∫£n Tr·ªã
        </h1>

        {/* Messages */}
        {error && (
          <div className="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
            {error}
          </div>
        )}
        
        {success && (
          <div className="mb-6 p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg">
            {success}
          </div>
        )}

        {/* Test Connection */}
        <div className="mb-8 p-4 bg-gray-50 rounded-lg">
          <h3 className="text-lg font-semibold mb-4">üì° Ki·ªÉm tra k·∫øt n·ªëi</h3>
          <div className="flex space-x-4">
            <button
              onClick={testConnection}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Test Backend API
            </button>
            <button
              onClick={testMapConnection}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
            >
              Test Maps API Key
            </button>
          </div>
        </div>

        {/* Google Maps API Configuration */}
        <div className="bg-gray-50 p-6 rounded-lg mb-8">
          <h2 className="text-xl font-semibold mb-6 text-gray-800">üó∫Ô∏è C·∫•u h√¨nh Google Maps</h2>
          
          <form onSubmit={handleApiKeySubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Google Maps API Key
              </label>
              <input
                type="password"
                value={apiKey}
                onChange={(e) => setApiKey(e.target.value)}
                placeholder="Nh·∫≠p Google Maps API Key"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
              <p className="text-xs text-gray-500 mt-1">
                API Key c·∫ßn c√≥ quy·ªÅn: Maps JavaScript API, Places API, Directions API, Geocoding API
              </p>
            </div>

            <div className="bg-yellow-50 p-4 rounded-lg">
              <h4 className="font-semibold text-yellow-800 mb-2">üìù H∆∞·ªõng d·∫´n l·∫•y API Key:</h4>
              <ol className="text-yellow-700 text-sm space-y-1">
                <li>1. Truy c·∫≠p <a href="https://console.cloud.google.com/" target="_blank" rel="noopener noreferrer" className="underline">Google Cloud Console</a></li>
                <li>2. T·∫°o project m·ªõi ho·∫∑c ch·ªçn project hi·ªán c√≥</li>
                <li>3. Enable c√°c APIs: Maps JavaScript API, Places API, Directions API, Geocoding API</li>
                <li>4. T·∫°o credentials ‚Üí API Key</li>
                <li>5. (T√πy ch·ªçn) H·∫°n ch·∫ø API Key theo domain ƒë·ªÉ b·∫£o m·∫≠t</li>
              </ol>
            </div>

            <div className="text-center">
              <button
                type="submit"
                disabled={loading}
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed font-semibold"
              >
                {loading ? 'ƒêang l∆∞u...' : 'üíæ L∆∞u API Key v√†o Database'}
              </button>
              <p className="text-xs text-gray-500 mt-2">
                API Key s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o database SQLite v√† localStorage
              </p>
            </div>
          </form>
        </div>

        {/* Price Configuration */}
        <div className="bg-gray-50 p-6 rounded-lg">
          <h2 className="text-xl font-semibold mb-6 text-gray-800">üí∞ C·∫•u h√¨nh gi√°</h2>
          
          <form onSubmit={handleConfigSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Gi√° c∆° b·∫£n (VNƒê)
                </label>
                <input
                  type="number"
                  value={config.base_price}
                  onChange={(e) => handleInputChange('base_price', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
                <p className="text-xs text-gray-500 mt-1">Gi√° kh·ªüi ƒëi·ªÉm cho m·ªçi chuy·∫øn ƒëi</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Gi√° theo km (VNƒê/km)
                </label>
                <input
                  type="number"
                  value={config.price_per_km}
                  onChange={(e) => handleInputChange('price_per_km', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
                <p className="text-xs text-gray-500 mt-1">Gi√° c·ªông th√™m cho m·ªói km</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Gi√° t·ªëi thi·ªÉu (VNƒê)
                </label>
                <input
                  type="number"
                  value={config.min_price}
                  onChange={(e) => handleInputChange('min_price', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
                <p className="text-xs text-gray-500 mt-1">Gi√° th·∫•p nh·∫•t cho b·∫•t k·ª≥ chuy·∫øn ƒëi n√†o</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Gi√° t·ªëi ƒëa (VNƒê)
                </label>
                <input
                  type="number"
                  value={config.max_price}
                  onChange={(e) => handleInputChange('max_price', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
                <p className="text-xs text-gray-500 mt-1">Gi√° cao nh·∫•t cho b·∫•t k·ª≥ chuy·∫øn ƒëi n√†o</p>
              </div>
            </div>

            <div className="bg-blue-50 p-4 rounded-lg">
              <h4 className="font-semibold text-blue-800 mb-2">üìä C√¥ng th·ª©c t√≠nh gi√°:</h4>
              <p className="text-blue-700 text-sm">
                <strong>Gi√° cu·ªëi = max(Gi√° t·ªëi thi·ªÉu, min(Gi√° c∆° b·∫£n + (Kho·∫£ng c√°ch √ó Gi√°/km), Gi√° t·ªëi ƒëa))</strong>
              </p>
              <div className="mt-2 text-blue-600 text-sm">
                <p>V√≠ d·ª• v·ªõi c·∫•u h√¨nh hi·ªán t·∫°i:</p>
                <p>‚Ä¢ Chuy·∫øn ƒëi 5km = max({config.min_price?.toLocaleString()}, min({config.base_price?.toLocaleString()} + (5 √ó {config.price_per_km?.toLocaleString()}), {config.max_price?.toLocaleString()})) = {Math.max(config.min_price, Math.min(config.base_price + (5 * config.price_per_km), config.max_price)).toLocaleString()} VNƒê</p>
              </div>
            </div>

            <div className="text-center">
              <button
                type="submit"
                disabled={loading}
                className="px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed font-semibold"
              >
                {loading ? 'ƒêang c·∫≠p nh·∫≠t...' : 'üíæ L∆∞u c·∫•u h√¨nh gi√°'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default AdminPage;